<?php if( !defined( 'BASEPATH' ) ) exit( 'No direct script access allowed' );

/**
 * Logtrino UI Engine
 */

class Logtrino_UI {
    
	/**
	 * Store data for UI
	 * No public access allowed. Only access from UI engine
	 *
	 * @access private
	 * @var    $_data
	 */
	private $_data;

	/**
	 * Title of UI
	 * No public access allowed. Only access from UI engine
	 *
	 * @access private
	 * @var    $_title
	 */
	private $_title;

	/**
	 * UI header template file
	 * Store header template file for UI if different header will be used
	 *
	 * @access private
	 * @var    $_header
	 */
	private $_header;
    
    /**
     * UI Sidebar template file
     * Store sidebar template file for UI if different sidebar will be used
     *
     * @access private
     * @var    $_sidebar
     */
    private $_sidebar;

	/**
	 * UI footer template file
	 * Store footer template file for UI if different footer will be used
	 *
	 * @access private
	 * @var    $_footer
	 */
	private $_footer;

	/**
	 * View for UI
	 * This is dynamic view of UI to set from module for specific view
	 *
	 * @access private
	 * @var    $_view
	 */
	private $_view;

	/**
	 */
	private $_view_path = 'administration';

	/**
	 * Check UI for rendering admin or portal site
	 *
	 * @access private
	 * @var    $_admin_area
	 */
	private $_admin_area = TRUE;

	/**
	 * Messages display in UI
	 * Validation errors, input / output messages generated by system will be stored in this array
	 *
	 * @access private
	 * @var    $_messages
	 */
	private $_messages = array( 'warning' => array(), 'success' => array(), 'info' => array(), 'danger' => array() );

	/**
	 * Store script files for UI
	 * All scripts for head section of UI will be stored in 'header'
	 * All scripts for footer section of UI will be stored in 'footer'
	 * All scripts file registered with `_add_script` will be added into this array
	 *
	 * @access private
	 * @var    $_scripts
	 */
	private $_scripts = array( 'header' => array(), 'footer' => array() );

	/**
	 * Stores stylesheet documents for UI
	 * All stylesheet documents registered with `_add_style` will be added into this array
	 *
	 * @access private
	 * @var    $_styles
	 */
	private $_styles = array();

	/**
	 * Disabled rendering engine
	 * If rendering is disabled, the output will be stored in a variable of UI and will be 
	 * return as data
	 *
	 * @access private
	 * @var    $_disabled_render
	 */
	private $_disabled_render = FALSE;

	/**
	 * Store data return by render
	 *
	 * @access private
	 * @var    $_render_data
	 */
	private $_render_data;

	/**
	 * Store breadcrumb data array
	 *
	 * @access private
	 * @var    $_breadcrumb_paths
	 */
	private $_breadcrumb_paths = array();

	/**
	 * Class constructor
	 */
	function __construct() {
		$this->ci = &get_instance();

		// Set up breadcrumb
		$this->_init_breadcrumb();
	}

	/**
	 * Set data for UI
	 *
	 * @access public
	 * @param  (array) $data Associative array of data
	 * @return void
	 */
	function _set_data( $data ) {
		if( $data && !empty( $data ) && is_array( $data ) && count( $data ) > 0 ) {
			foreach( $data as $key => $value ) {
				$this->_data[ $key ] = $value;
			}
		} else {
			$this->_data = $data;
		}
	}

	/**
	 * Get data stored for UI using _set_data method.
	 * All data are storing with associative array, providing key will return only data that 
	 * stored with the key without returning the whole data array.
	 *
	 * @access public
	 * @param  (string) $key Associative key of data
	 * @return (array) Associative array of data stored in UI
	 */
	function _get_data( $key = '' ) {
		if( '' != $key ) {
			return isset( $this->_data[ $key ] ) ? $this->_data[ $key ] : null;
		}

		return $this->_data;
	}

	/**
	 * Set the document title for UI.
	 *
	 * @access public
	 * @param  (string) $title Title text to display for UI
	 * @return void
	 */
	function _set_title( $title ) {
		$this->_title = $title;
	}

	/**
	 * Get the document title of UI.
	 * The title was set by _set_title function before using
	 *
	 * @access public
	 * @return (string) Title of UI
	 */
	function _get_title() {
		return $this->_title;
	}

	/**
	 * Set header for UI
	 *
	 * @access public
	 * @param  (string) $header_file File path of header file use for UI
	 * @return void
	 */
	function _set_header( $header_file ) {
		$this->_header = $header_file;
	}

	/**
	 * Get header for UI.
	 * Generally load view for header template.
	 *
	 * @access public
	 * @return void
	 */
	function _get_header() {
		if( $this->_header ) {
			$this->ci->load->view( $this->_header );
		} else {
			$this->ci->load->view( $this->_view_path . '/templates/header' );
		}
	}

	/**
	 * Get sidebar for UI.
	 * Generally load view for sidebar template.
	 *
	 * @access public
	 * @return void
	 */
	function _get_sidebar(){
		$this->ci->load->view( $this->_view_path . '/templates/sidebar' );
	}

	/**
	 * Set footer for UI
	 *
	 * @access public
	 * @param  (string) $footer_file File path of footer use in UI
	 * @return void
	 */
	function _set_footer( $footer_file ) {
		$this->_footer = $footer_file;
	}

	/**
	 * Get footer for UI.
	 * Generally load view for footer template.
	 * 
	 * @access public
	 * @return void
	 */
	function _get_footer() {
		if( $this->_footer ) {
			$this->ci->load->view( $this->_footer );
		} else {
			$this->ci->load->view( $this->_view_path . '/templates/footer' );
		}
	}

	/**
	 * Add Javascript file into UI with script name, file URL, and dependencies.
	 * The script will add into two parts, header and footer. The last parameter $footer will determine  
	 * where the script file will be used.
	 *
	 * @access public
	 * @param  (string) $script_name Name of script.
	 * @param  (string) $file_url URL of script.
	 * @param  (array) $dependencies Numeric array contains the script name of dependencies.
	 *                 The script will load after it's dependencies loaded and avoiding script execution failure.
	 * @param  (bool) $footer True if the script is used in footer, false to use in header.
	 *                Default is true and add script in footer.
	 * @return void
	 */
	function _add_script( $script_name, $file_url, $dependencies = array(), $footer = true ) {
		$script_vars = array(
			'name'         => $script_name,
			'file'         => $file_url,
			'type'         => 'text/javascript',
			'dependencies' => $dependencies
		);

		if( $footer ) {
			array_push( $this->_scripts['footer'], $script_vars );
		} else {
			array_push( $this->_scripts['header'], $script_vars );
			/**
			 * Need to mprove this part for load dependencies scripts
			 */
			
			if( $dependencies ) {
				
				foreach( $dependencies as $dependency ) {
					if( isset( $this->_scripts['header'][ $dependency ] ) ) {
						$this->_scripts['header'][ $dependency ] = $this->_scripts['header'][ $dependency ];
					} else {
						$this->_scripts['header'][ $dependency ] = '';
					}
				}
			}
			
			if( isset( $this->_scripts['header'][ $script_name ] ) ) {
				$this->_scripts[ 'header' ][ $script_name ] = $script_file_url;
			} else {
				$this->_scripts['header'][ $script_name ] = $script_file_url;
			}
			
		}
	}

	/**
	 * Add stylesheet document into UI with stylesheet name, file URL.
	 *
	 * @access public
	 * @param  (string) $script_name Name of stylesheet.
	 * @param  (string) $file_url URL of stylesheet
	 * @param  (array) $attrs Attributes of stylesheet document which will output in HTML <link> tag.
	 *                Default is true and add script in footer.
	 * @return void
	 */
	function _add_style( $style_name, $file_url, $attrs = array() ) {
		$stylesheet_vars = array(
			'name'    => $style_name,
			'file'    => $file_url,
			'type'    => 'text/css',
			'attrs'   => $attrs
		);

		/**
		 * Add in stylesheet array
		 */
		array_push( $this->_styles, $stylesheet_vars );
	}

	/**
	 * Generate header scripts, stylesheets and meta tags
	 *
	 * @access public
	 * @return mixed
	 */
	function _header() {
		$meta = "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n";
        
		$style_tag = "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/bootstrap.min.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/bootstrap.vertical-tabs.min.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/jquery-ui.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/jquery.gritter.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/font-awesome-4.2.min.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/style.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/widgets.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
		$style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/global.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";
        $style_tag .= "<link rel=\"stylesheet\" href=\"" . base_url( 'assets/css/jquery.auto-complete.css' ) . "\" media=\"all\" type=\"text/css\">\r\n";

		if( count( $this->_styles ) > 0 ) {
			foreach( $this->_styles as $style ) {
				$style_tag .= "<link rel=\"stylesheet\" href=\"" . $style['file'] . "\" ";

				if( count( $style['attrs'] ) > 0 ) {
					foreach( $style['attrs'] as $key => $value ) {
						$style_tag .= $key . "=\"" . $value . "\" ";
					}
				}

				$style_tag .= ">\r\n";
			}	
		}
		
		$script_tag = "<script src=\"" . base_url( 'assets/js/jquery.js' ) . "\" type=\"text/javascript\"></script>\r\n";
		$script_tag .= "<script src=\"" . base_url( 'assets/js/jquery-ui.min.js' ) . "\" type=\"text/javascript\"></script>\r\n";
		$script_tag .= "<script src=\"" . base_url( 'assets/js/respond.min.js' ) . "\" type=\"text/javascript\"></script>\r\n";
		$script_tag .= "<script src=\"" . base_url( 'assets/js/logtrino.js' ) . "\" type=\"text/javascript\"></script>\r\n";
        $script_tag .= "<script src=\"" . base_url( 'assets/js/jquery.auto-complete.js' ) . "\" type=\"text/javascript\"></script>\r\n";

		if( count( $this->_scripts ) > 0 ) {
			foreach( $this->_scripts['header'] as $script ) {
				$script_tag .= "<script type=\"" . $script['type'] . "\" src=\"" . $script['file'] . "\"></script>\r\n";
			}	
		}
		
		echo $meta . $style_tag . $script_tag;
	}

	/**
	 * Generate footer markup, generally print footer javascript files
	 *
	 * @access public
	 * @return mixed
	 */
	function _footer() {
		$script_tag = "<script src=\"" . base_url( 'assets/js/bootstrap.min.js' ) . "\" type=\"text/javascript\"></script>\r\n";
		$script_tag .= "<script src=\"" . base_url( 'assets/js/jquery.gritter.min.js' ) . "\" type=\"text/javascript\"></script>\r\n";
		$script_tag .= "<script src=\"" . base_url( 'assets/js/custom.js' ) . "\" type=\"text/javascript\"></script>\r\n";
        $script_tag .= "<script src=\"" . base_url( 'assets/js/jquery.validate.js' ) . "\" type=\"text/javascript\"></script>\r\n";
        $script_tag .= "<script src=\"" . base_url( 'assets/js/autocomplete.js' ) . "\" type=\"text/javascript\"></script>\r\n";
        
        

		foreach( $this->_scripts['footer'] as $script ) {
			$script_tag .= "<script type=\"" . $script['type'] . "\" src=\"" . $script['file'] . "\"></script>\r\n";
		}

		echo $script_tag;
	}


	/**
	 * Set view file for UI before rendering template.
	 * The view file set by this method will be used when _view() method is called.
	 *
	 * @access public
	 * @param  (string) $view_file Name of view file for UI
	 * @return void
	 */
	function _set_view( $view_file ) { 
		$this->_view = $view_file;
	}

	/**
	 * Display view with data.
	 * Check if there is a view set and load it, or use default view
	 *
	 * @access public
	 * @return void
	 */
	function _view() {
		if( $this->_view ) {
			$this->ci->load->view( $this->_view );
		} else {
			$this->ci->load->view( $this->_view_path . '/templates/default' );
		}
	}


	/**
	 * Set messages for view
	 *
	 * @access public
	 * @param  $type (Optional) Type of message. Default is warning message
	 * @param  $msg (Optional) Message text
	 * @return void
	 */
	function _set_message( $type = 'warning', $msg = '' ) {
		if( count( $this->_messages[ $type ] ) > 0 ) {
			if( is_array( $msg ) && count( $msg ) > 0 ) {
				$this->_messages[ $type ] = array_merge( $this->_messages[ $type ], $msg );
			} else {
				array_push( $this->_messages[ $type ], $msg );
			}
		} else {
			if( is_array( $msg ) && count( $msg ) > 0 ) {
				$this->_messages[ $type ] = array_merge( $this->_messages[ $type ], $msg );
			} else {
				$this->_messages[ $type ] = array( $msg );
			}
		}
	}

	/**
	 * Get the messages stored in _messages var and 
	 * session flash data. Messages can be set in both session flash data and 
	 * _messages var via _set_message method from UI engine
	 *
	 * @access private
	 * @return (array) $this->_messages Stored messages
	 */
	protected function _get_message() {
		// Check messsages stored in session flash data
		$flash_messages = $this->ci->session->flashdata( 'message' );

		if( is_array( $flash_messages ) && count( $flash_messages ) > 0 ) {
			foreach( $this->_messages as $type => $msgs ) {
				// Check if type of message is stored in flash data
				if( isset( $flash_messages[ $type ] ) ) {
					if( is_array( $flash_messages[ $type ] ) ) {
						// If message store in flashdata is array, combine with theme message
						$this->_messages[ $type ] = array_merge( $this->_messages[ $type ], $flash_messages[ $type ] );
					} elseif( is_string( $flash_messages[ $type ] ) ) {
						// If a string, store as a string with it's type
						array_push( $flash_messages[ $type ], $this->_messages[ $type ] );
					}
				}
			}
		}
		// Return all messages
		return $this->_messages;
	}

	/**
	 * Display system message set for view
	 * Validation errors and all I/O messages of system will be loaded via this method
	 *
	 * @access public
	 * @return void
	 */
	function _message() {
		$msg = array( 'messages' => $this->_get_message() );

		$this->ci->load->view( 'templates/message', $msg );
	}


	/**
	 * Render UI
	 * Generally load view for main template file
	 *
	 * @access public
	 * @return void
	 */
	function _render( $view = FALSE ) {

		$this->_data['segment_string'] = $this->ci->uri->uri_string();
		$this->_data['segment'] = $this->ci->uri->segment_array();
		for($i = 0; $i < 7; $i++) {
			if(!array_key_exists($i, $this->_data['segment'])) {
				$this->_data['segment'][$i] = '';
			}
		}

		if( FALSE !== $view ) {
			if( $this->_disabled_render ) {
				$this->_render_data = $this->ci->load->view( $view, $this->_data, TRUE );	
			} else {
				$this->ci->load->view( $view, $this->_data );
			}
			
		} else {
			if( $this->_disabled_render ) {
				$this->_render_data =  $this->ci->load->view( $this->_view_path . '/index', $this->_data, TRUE );
			} else {
				$this->ci->load->view( $this->_view_path . '/index', $this->_data );
			}
		}
	}

	/**
	 * Tell UI engine to render admin or portal
	 *
	 * @access public
	 * @return void
	 */
	function _is_admin_area( $is_admin_area = TRUE ) {
		$this->_admin_area = $is_admin_area;
		if( $is_admin_area === FALSE ) {
			$this->_view_path = 'portal';
		}
	}

	/**
	 * Display header of page. Generally breadcrumb and title will be displayed
	 *
	 * @access public
	 * @return void
	 */
	function _page_header() {
		$this->ci->load->view( $this->_view_path . '/templates/page_header' );
	}

	/**
	 * Set up pagination for UI
	 *
	 * @access public
	 * @param  (array) Associative array of pagination configurations
	 * @return void
	 */
	function _set_up_pagination( $config = array() ) {
		$sys_config        = $this->ci->config->item( 'logtrino' );
		$pagination_config = $sys_config['ui_config']['pagination'];

		if( $config && count( $config ) > 0 ) {
			$config = array_merge( $pagination_config, $config );
		} else {
			$config = $pagination_config;
		}

		// Load CI pagination library
		$this->ci->load->library( 'pagination' );
		$this->ci->pagination->initialize( $config );
	}

	/**
	 * Display a pagination for specific records retrieved from database.
	 * It only works when _set_up_pagination method is called before using.
	 *
	 * @access public
	 * @return void
	 */
	function _pagination( $echo = TRUE ) {
		if( isset( $this->ci->pagination ) ) {
			if( $this->ci->pagination->total_rows > $this->ci->pagination->per_page ) {
				if( $echo === FALSE ) {
					return $this->ci->pagination->create_links();
				}
				
				echo $this->ci->pagination->create_links();
			}
		}
	}

	/**
	 * Disable rendering and don't output to browser
	 *
	 * @access public
	 * @return void
	 */
	function _disabled_render( $disabled = FALSE ) {
		$this->_disabled_render = $disabled;
	}

	/**
	 * Display render data stored in UI
	 *
	 * @access public
	 * @return mixed
	 */
	function _get_render_data() {
		if( $this->_disabled_render ) {
			return $this->_render_data;
		}
		return '';
	}

	/**
	 * Initialized breadcrumb with appropriate paths
	 * If paths is empty, UI will generate default paths based on URI segments
	 *
	 * @access public
	 * @params (array) $paths Paths to be used in breadcrumb. It must be array format which contains
	 *                 associative array of each path.
	 *                 array( array( 'index' => 'index', 'label' => 'Path Label', 'url' => 'path_url' ) )
	 */
	function _init_breadcrumb( $paths = array() ) {
		/**
		 * Define home path with it's label, url and index key
		 */
		$this->_breadcrumb_paths['home'] = array(
			'index' => 'home',
			'label' => 'Home'
		);

		/**
		 * Check URL for home path for admin and portal front-end
		 */
		if( $this->_admin_area ) {
			$this->_breadcrumb_paths['home']['url'] = site_url( 'dashboard' );
            
		} else {
			$this->_breadcrumb_paths['home']['url'] = site_url();
		}
		$this->_setup_breadcrumb( $paths );
	}


	/**
	 * Set up breadcrumb before using. It's automatically started by __constructor 
	 * after initializing the UI engine. The breadcrumb generates based on CI URI routes
	 * Module > Controller > Method
	 *
	 * @access public
	 * @return void
	 */
	function _setup_breadcrumb( $paths = array() ) {
		// Get the module, class and method from router
		$module = $this->ci->router->fetch_module();
		$class  = $this->ci->router->class;
		$method = $this->ci->router->method;

		/**
		 * If paths are defined, override the default paths and use these paths.
		 * Paths can be registered from controller
		 */
		if( !empty( $paths ) || count( $paths ) > 0 ) {
			foreach( $paths as $path ) {
				if( isset( $path['disabled'] ) && $path['disabled'] == true ) {
					unset( $this->_breadcrumb_paths['paths'][$path['index']] );
					continue;
				}

				if( !isset( $path['label'] ) || !isset( $path['url'] ) ) {
					// Breadcrumb need label and url
					continue;
				}

				$this->_breadcrumb_paths['paths'][$path['index']] = $path;
			}
		} else {
			// Add sub-folder name into URL if controller is inside sub-folder
			$suffix = '';

			// Check if controller is using sub-folder
			if( is_dir( APPPATH . 'modules/' . $module . '/controllers/' . $this->ci->uri->segment( 2 ) ) ) {
				// Controller is inside sub-folder, we need to prepend sub-folder name before class name
				$suffix = '/' . $this->ci->uri->segment( 2 );
			}

			// If module and controller name are same, we don't need to add contrller name in URL
			if( $module == $class ) {
				$module_base_url = site_url( $module );
			} else {
				$module_base_url = site_url( $module . $suffix . '/' . $class );
			}

			// Default paths container
			$default_paths = array();

			// Get the URI segments
			$segment_array = $this->ci->uri->segment_array();

			for( $i = 1; $i <= count( $segment_array ); $i++ ) {

				if( !isset( $segment_array[ $i ] ) ) continue;
				
				// Define default paths to add into breadcrumb
				if( $module == $segment_array[ $i ] ) {
					$default_paths[ $module ] = array(
						'index' => $module,
						'label' => ucwords( str_replace( '_', ' ', $module ) ),
						'url'   => site_url( $module . $suffix )
					);
				}

				if( $class == $segment_array[ $i ] ) {
					$default_paths[ $class ] = array(
						'index' => $module,
						'label' => ucwords( str_replace( '_', ' ', $class ) ),
						'url'   => $module_base_url
					);
				}

				/**
				 * Check if method is index, if so, do not add into breadcrumb.
				 * Index are same with module base url or controller base url of module
				 */
				if( $method == $segment_array[ $i ] && $method != 'index' ) {
					$default_paths[ $method ] = array(
						'index' => $method,
						'label' => ucwords( str_replace( '_', ' ', $method ) ),
						'url'   => $module_base_url . '/' . $method
					);
				}
			}
            
			// Add paths into breadcrumb
			$this->_breadcrumb_paths['paths'] = $default_paths;
		}
	}

	/**
	 * Register breadcrumb from controller method. Controller's method can give 
	 * own label and URL to display meaningful label on screen and specific 
	 * URL.
	 *
	 * @access public
	 * @return void
	 */
	function _register_breadcrumb( $params = array(), $index_path = FALSE ) {
		if( $params === FALSE ) {
			$module = $this->ci->router->fetch_module();
			unset( $this->_breadcrumb_paths[ $module ] );
		} else {
			if( !empty( $params ) && count( $params ) > 0 ) {
				// Check which method to register
				$method = $this->ci->router->method;

				foreach( $params as $key => $value ) {
					if( isset( $this->_breadcrumb_paths[ $method ] ) ) {
						$this->_breadcrumb_paths[ $method ][ $key ] = $value;
					}
				}
			}
		}

		if( $index_path !== FALSE ) {
			$this->_breadcrumb_home[ 'label' ] = $index_path[ 'label' ];
			$this->_breadcrumb_home[ 'url' ]   = $index_path[ 'url' ];
		}
	}

	/**
	 * Get the paths stored in breadcrumb to generate and display on screen.
	 *
	 * @access private
	 * @return void
	 */
	private function _get_breadcrumb() {
		if( !empty( $this->_breadcrumb_paths ) && count( $this->_breadcrumb_paths ) > 0 ) {
			$paths = array();
			
			if( count( $this->_breadcrumb_paths['paths'] ) > 0 ) {
				return $this->_breadcrumb_paths['paths'];
			}

			return array();
			/*
			foreach( $this->_breadcrumb_paths as $key => $val ) {

				if( $key == 'index' ) continue;

				$label = $this->_breadcrumb_paths[ $key ]['label'];
				$url   = $this->_breadcrumb_paths[ $key ]['url'];

				$path = array(
					'label' => $label,
					'url'   => $url
				);

				array_push( $paths, $path );
			}

			return $paths;*/
		}

		return array();
	}

	/**
	 * Display breadcrumb on UI
	 *
	 * @access public
	 * @return mixed
	 */
	function _breadcrumb() {
		$breadcrumbs = $this->_get_breadcrumb();
		/*
		if( $this->ci->router->method == 'index' ) {
			$home = $this->_breadcrumb_home[ 'label' ];
			} else {
			$home = anchor( $this->_breadcrumb_home[ 'url' ], $this->_breadcrumb_home[ 'label' ] );
			$home .= ' <span class="divider">/</span>';
			}
		*/

		$home = anchor( $this->_breadcrumb_paths['home']['url'], '<i class="fa fa-home"></i> ' . $this->_breadcrumb_paths['home']['label'] );

		$links = array();

		if( !empty( $breadcrumbs ) && count( $breadcrumbs ) ) {
			$count = 0;

			foreach( $breadcrumbs as $breadcrumb ) {
				$label = $breadcrumb['label'];
				$url   = $breadcrumb['url'];

				if( $count == count( $breadcrumbs ) - 1 ) {
					$link = ' <span>' . $label . '</span>';
				} else {
					$link = ' <a href="' . $url . '" class="link-' . $count . '">' . $label . '</a>';
				}

				array_push( $links, $link );
				$count++;
			}
		}

		if( count( $links ) > 0 ) {
			$home .= ' <span class="divider">/</span>';
		}
		echo $home . implode( ' <span class="divider">/</span>', $links );
	}

}

/* End */
/* Location: `application/libraries/logtrino_ui.php` */
